name: Retail_BuildISO

on:
    workflow_dispatch:  # 手动触发工作流

jobs:
  build:
    runs-on: windows-latest  # 运行环境可以是ubuntu, windows, 或 macos

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'  # 设置你使用的Python版本

      # 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 获取最新的 UUP 下载包，并解压到当前目录
      - name: Get latest UUP download package
        run: |
          python down.py

      # 自定义参数
      - name: Customize parameters
        run: |
          python reCC_iso.py
          python reCAL.py

      - name: Read version file
        id: read_version
        run: |
          # Check if the version file exists
          if (-Not (Test-Path -Path "version")) {
            echo "Error: version file not found."
            exit 1
          }

          # Read the version file
          $version = Get-Content -Path "version"

          # Export the version as an environment variable
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Use version variable
        run: |
          echo "The version is: $env:VERSION"

      # 执行uup_download_windows.cmd
      - name: Run uup_download_windows.cmd
        shell: cmd7z a -v2G example.7z example.txt
        run: |
          uup_download_windows.cmd  # 执行uup_download_windows.cmd脚本

      - name: Find ISO file
        id: find_iso
        run: |
          # Find the ISO file in the current directory
          $isoFile = Get-ChildItem -Path . -Filter *.iso | Select-Object -First 1
          if ($isoFile) {
            echo "ISO_FILE=$isoFile" >> $env:GITHUB_ENV
          } else {
            echo "Error: ISO file not found."
            exit 1
          }

      - name: Find ISO file
        id: test7z
        continue-on-error: true
        run: |
          7z a -v2G ${{ env.ISO_FILE }}.7z ${{ env.ISO_FILE }}

          
      - name: Upload Build Artifacts (ISO)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VERSION }}
          path: |
            ${{ env.ISO_FILE }}

      - name: Check if tag exists and get existing release
        id: check_tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.VERSION
            }).catch(() => null);
            core.setOutput('tag_exists', release ? true : false);
            if (release) {
              core.setOutput('upload_url', release.data.upload_url);
              core.setOutput('release_id', release.data.id);
            }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
        if: ${{ !steps.check_tag.outputs.tag_exists }}

      - name: Upload Build Artifacts (ISO)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.check_tag.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ISO_FILE }}
          asset_name: ${{ env.ISO_FILE }}
          asset_content_type: application/octet-stream